@inject CategoryService _categoryService
@implements IDisposable

<div class="sidebarTableRow">
    <input class="tableRowInput" type="text" @bind="@category.CategoryName" @ref="input" disabled=@editDisabled />
    <div class="tableIcon editIcon">
        @if (editDisabled)
        {
            <i class="bi bi-pencil-fill" @onclick="@(() => handleChangeEdit(false))"></i>
        }
        else
        {
            <i class="bi bi-check-lg" @onclick="@(() => handleEditCategory())"></i>
        }
    </div>
    <div class="tableIcon deleteIcon">
        @if (editDisabled)
        {
            <i class="bi bi-trash-fill" @onclick="@(() => handleDeleteCategory())"></i>
        }
        else
        {
            <i class="bi bi-x-lg" @onclick="@(() => handleChangeEdit(true))"></i>
        }
    </div>
</div>

@code {
    [Parameter]
    public CategoryModel category { get; set; }

    private bool editDisabled { get; set; } = true;

    public ElementReference input { get; set; }


    protected override void OnInitialized()
    {
        _categoryService.OnStateChange += StateHasChanged;
    }

    public void handleChangeEdit(bool disabledBool)
    {
        editDisabled = disabledBool;
    }

    public async void handleEditCategory()
    {
        await _categoryService.EditCategory(category);
        editDisabled = true;

        StateHasChanged();
    }

    public void handleDeleteCategory()
    {
        _categoryService.SetCategoryToDelete(category);
    }

    public void Dispose()
    {
        _categoryService.OnStateChange -= StateHasChanged;
    }
}